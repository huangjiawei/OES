@using OnlineExam.Models
@model OnlineExam.Models.TestPaper
@{

    OnlineExam.Models.ExamEntities ee = new OnlineExam.Models.ExamEntities();
    var title = "试卷试题编辑";
    //string bigNum = "零一二三四五六七八九十";
    var cids = Model.Paper_Choice.Select(m => m.QuestionID).ToList();
    var Choice = (from q in ee.QuestionChoice
                  where cids.Contains(q.ID)
                  select q).ToList();
    var eids = Model.Paper_Essay.Select(m => m.QuestionID).ToList();
    var Essay = (from q in ee.QuestionEssay
                 where eids.Contains(q.ID)
                 select q).ToList();

}
@{
    int randomKey = 1;
    var temp =
        (from c in Model.Paper_QuestionCategory
         select new QuestionCategoryJson
         {
             Quantity = c.Quantity,
             RandomKey = randomKey++,
             ScorePerQuestion = c.ScorePerQuestion,
             Sequence = c.Sequence,
             Title = c.Title,
             QuestionType = c.QuestionType,
             ChoiceList = (from k in Choice
                           from s in c.Paper_Choice
                           where k.ID == s.QuestionID
                           select new ChoiceJson
                           {
                               ID = k.ID,
                               Question = k.Question == null ? "" : k.Question.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               Info = k.Info == null ? "" : k.Info.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               Description = k.Description == null ? "" : k.Description.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               SmallQuestionNumber = s.SmallQuestionNumber,
                               BigQuestionNumber = s.BigQuestionNumber,

                               QuestionType = k.IsMultiple ? QuestionType.MultipleChoice.ToString() : QuestionType.SingleChoice.ToString(),
                               Score = s.Score,
                               OptionA = k.OptionA == null ? "" : k.OptionA.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               OptionB = k.OptionB == null ? "" : k.OptionB.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               OptionC = k.OptionC == null ? "" : k.OptionC.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               OptionD = k.OptionD == null ? "" : k.OptionD.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               OptionE = k.OptionE == null ? "" : k.OptionE.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               OptionF = k.OptionF == null ? "" : k.OptionF.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                               AisTrue = k.AisTrue,
                               BisTrue = k.BisTrue,
                               CisTrue = k.CisTrue,
                               DisTrue = k.DisTrue,
                               EisTrue = k.EisTrue,
                               FisTrue = k.FisTrue,
                               IsMultiple = k.IsMultiple
                           }).ToList(),
             EssayList = (from k in Essay
                          from s in c.Paper_Essay
                          where k.ID == s.QuestionID
                          select new EssayJson
                          {
                              ID = k.ID
                              ,
                              QuestionType = k.QuestionType,
                              BigQuestionNumber = s.BigQuestionNumber,
                              SmallQuestionNumber = s.SmallQuestionNumber,

                              Score = s.Score,
                              Question = k.Question == null ? "" : k.Question.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                              Info = k.Info == null ? "" : k.Info.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                              Description = k.Description == null ? "" : k.Description.Replace("\r\n", "").Replace("\r", "").Replace("\n", ""),
                              Answer = k.Answer == null ? "" : k.Answer.Replace("\r\n", "").Replace("\r", "").Replace("\n", "")
                          }).ToList()
         }).ToList();
    //重新排序
    int index = 1;
    foreach (var item in temp)
    {
        item.Sequence = index++;
        int qindex = 1;
        foreach (var q in item.ChoiceList.OrderBy(m => m.SmallQuestionNumber))
        {
            q.SmallQuestionNumber = qindex++;
        }
        qindex = 1;
        foreach (var q in item.EssayList.OrderBy(m => m.SmallQuestionNumber))
        {
            q.SmallQuestionNumber = qindex++;
        }
    }
    var jsonCategory = System.Web.Helpers.Json.Encode(temp);
    var newCategory = System.Web.Helpers.Json.Encode(new QuestionCategoryJson());
    var newChoice = System.Web.Helpers.Json.Encode(new ChoiceJson());
    var newEssay = System.Web.Helpers.Json.Encode(new EssayJson());
}
<div id="vueContent">
    <div class="hidden">

        <div id="QuestionCategoryDlgTemplate" class="form-horizontal width300">
            <div class="form-group">
                @Html.Label("sequence", "大题号", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class=" col-md-8">
                    <select class="form-control" id="sequence" v-model="EditingCategory.Sequence">
                        <option v-for="n in (CategoryList.length)" value="{{n+1}}">{{bigNum[n+1]}}</option>
                        <option v-show="isEditCategory" value="{{EditingCategory.Sequence}}">
                            {{bigNum[EditingCategory.Sequence]}}
                        </option>
                    </select>
                </div>
            </div>
            <div class="form-group">

                @Html.Label("categoryName", "名称", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class=" col-md-8">
                    <input type="text" class="form-control " id="categoryName" v-model="EditingCategory.Title">

                </div>
            </div>
            <div v-show="!isEditCategory" class="form-group">
                @Html.Label("qtype", "试题类型", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class=" col-md-8">
                    <select id="qtype" class="form-control" v-model="EditingCategory.QuestionType">
                        @foreach (var i in Utitlity.GetQuestionTypeSelectList())
                        {
                            <option value="@i.Value">@i.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                @Html.Label("score", "每题默认分数", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class=" col-md-8">
                    <input type="number" class=" form-control " max="100" min="1" id="score" v-model="EditingCategory.ScorePerQuestion">
                </div>
            </div>

        </div>

        <div id="QuestionDlgTemplate" class="  ">
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="col-md-3 control-label">试题编号:</label>
                    <div class="col-md-4">
                        <input class=" form-control" type="text" placeholder="试题号" v-model="EditingQuestion.ID | EncodeQtNum  EditingQuestion.QuestionType" @@keyup.enter="RefreshEditingQeuestion()" @@blur="RefreshEditingQeuestion()" />

                    </div>
                    <span class=" col-md-1-5 alert-info">按Enter键刷新题目内容</span>
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label">题号：</label>
                    <div class="col-md-1 form-control"><input type="number" v-model="EditingQuestion.SmallQuestionNumber" placeholder="题号" /></div>

                    <label class="col-md-3 control-label">分数:</label>
                    <input class="col-md-1 form-control" type="text" v-model="EditingQuestion.Score" placeholder="分数" />

                </div>
            </div>
            <template v-if='EditingQuestion.Question!=""'>
                <div class="row question">
                    @*<div class="flowleft question-number">
                        </div>*@
                    <div class="flowleft ">
                        {{{EditingQuestion.Question}}}
                        @*<span class="score">
                                (

                                分)
                            </span>*@
                    </div>
                </div>

                <div class='option-list {{cate.QuestionType=="@QuestionType.MultipleChoice" ? "multiple" : "single"}}' v-show="ShowOption&&isChoice(EditingQuestion)">
                    <div data="A" class="row"><div class="flowleft">A：</div><div class="flowleft">{{{q.OptionA}}}</div></div>
                    <div data="B" class="row"><div class="flowleft">B：</div><div class="flowleft">{{{q.OptionB}}}</div></div>
                    <div data="C" v-if="q.OptionC!=''" class="row"><div class="flowleft">C：</div><div class="flowleft">{{{q.OptionC}}}</div></div>
                    <div data="D" v-if="q.OptionD!=''" class="row"><div class="flowleft">D：</div><div class="flowleft">{{{q.OptionD}}}</div></div>
                    <div data="E" v-if="q.OptionE!=''" class="row"><div class="flowleft">E：</div><div class="flowleft">{{{q.OptionE}}}</div></div>
                    <div data="F" v-if="q.OptionF!=''" class="row"><div class="flowleft">F：</div><div class="flowleft">{{{q.OptionF}}}</div></div>
                </div>
                <div class="row answer" v-show="ShowAnswer&&isChoice(EditingQuestion)">
                    <div class="flowleft">答案：</div>
                    <div class="flowleft ">
                        {{GetchoiceAnswer(q.Q)}}
                    </div>
                </div>
                <div class="row answer" v-show="ShowAnswer&&!isChoice(EditingQuestion)">
                    <div class="flowleft">答案：</div>
                    <div class="flowleft ">
                        {{{EditingQuestion.Answer}}}
                    </div>
                </div>
                <div class="row remark" v-show="ShowInfo">
                    <div class="flowleft">解释：</div>
                    <div class="flowleft ">
                        {{{EditingQuestion.Description}}}
                    </div>
                </div>
            </template>
            <div v-else>
                <template v-if="EditingQuestion.ID!=''&&EditingQuestion.ID!=-1&&EditingQuestion.ID!=undefined">
                    <div class="row">
                        <span class="alert-warning">题目{{EditingQuestion.ID | EncodeQtNum  EditingQuestion.QuestionType}}不存在</span>
                    </div>
                </template>
            </div>
        </div>>

    </div>

    <div class="form-horizontal">
        <h4 class="disabled">
            @title
            ——
            @Model.Name
        </h4>
        @Html.HiddenFor(model => model.ID)
        <h5>
            @Html.LabelFor(m => m.ExamType) :  @Model.ExamType.ToString() &nbsp;&nbsp;@Html.LabelFor(m => m.SubjectID)
            @{
                var subject = Utitlity.GetSubjct(Model.SubjectID);
                if (subject != null)
                {
                    @subject.SubjectName
                }
                else
                {
                    @Model.SubjectID
                }
            }
        </h5>
    </div>
    <div class="tab-pane">
        <div class="form-horizontal">
            <span><input id="ckanswer" type="checkbox" v-model="ShowAnswer" />显示答案</span>
            <span><input id="ckinfo" type="checkbox" v-model="ShowInfo" />显示解释</span><span>
                <input id="ckoption" type="checkbox" v-model="ShowOption" />显示选项
            </span>
        </div>
    </div>
    <div class=" panel" id="MainContent">
        <ul id="myTab" class="nav  nav-tabs">
            <template v-for="cate in CategoryList | orderBy 'Sequence'">
                <li class="dropdown {{cate.Sequence==1?'  acitve':''}}">
                    <a href="#tab-{{cate.RandomKey}}" data-toggle="tab">
                        {{bigNum[cate.Sequence]}}、
                        {{cate.Title}}
                        <span v-if="isChoice(cate)" class="badge pull-right">{{cate.ChoiceList.length}}</span>
                        <span v-else class="badge pull-right">{{cate.EssayList.length}}</span>
                    </a>

                </li>
            </template>
            <li>
                <button class="glyphicon glyphicon-plus btn btn
             center-block btn-lg" v-on:click="ShowCategoryDlg(false)"></button>
            </li>
        </ul>
        <div id="myTabContent" class="tab-content">
            <template v-for="cate in CategoryList | orderBy 'Sequence'">
                <div v-if="cate.QuestionType=='@QuestionType.MultipleChoice.ToString()'||cate.QuestionType=='@QuestionType.SingleChoice.ToString()'" class='tab-pane fade panel  {{cate.Sequence == 1 ? " in acitve" : ""}}' id="tab-{{cate.RandomKey}}">
                    <div class="panel-body">
                        <h4 class="row big-title">
                            {{bigNum[cate.Sequence]}}
                            、
                            {{cate.Title}}
                            (每题默认
                            {{cate.ScorePerQuestion}}
                            分
                            )
                            <a class="btn btn-primary btn-sm" v-on:click="ShowCategoryDlg(true,cate)">修改</a>
                            <a class="btn btn-primary btn-sm" v-on:click="ShowQuestionDlg(false,cate)">添加试题</a>
                            <a class="btn btn-danger btn-sm" v-on:click="deleteCategory(cate)">删除</a>
                            <a class="btn btn-danger btn-sm" v-on:click="clearQuestion(cate)">清空试题</a>

                        </h4>
                        <template v-for="q in cate.ChoiceList | orderBy 'SmallQuestionNumber'">
                            <div class=" panel-body question-content">
                                <div class="row ">
                                    <div class="flowleft question-number">{{q.SmallQuestionNumber}}、</div>
                                    <div class="flowleft question">
                                        {{{q.Question}}}
                                    </div>
                                    <span class="score">
                                        (
                                        {{q.Score}}
                                        分)
                                    </span>
                                </div>
                                <div class='option-list {{cate.QuestionType=="@QuestionType.MultipleChoice" ? "multiple" : "single"}}' v-show="ShowOption">
                                    <div data="A" class="row"><div class="flowleft">A：</div><div class="flowleft">{{{q.OptionA}}}</div></div>
                                    <div data="B" class="row"><div class="flowleft">B：</div><div class="flowleft">{{{q.OptionB}}}</div></div>
                                    <div data="C" v-if="q.OptionC!=''" class="row"><div class="flowleft">C：</div><div class="flowleft">{{{q.OptionC}}}</div></div>
                                    <div data="D" v-if="q.OptionD!=''" class="row"><div class="flowleft">D：</div><div class="flowleft">{{{q.OptionD}}}</div></div>
                                    <div data="E" v-if="q.OptionE!=''" class="row"><div class="flowleft">E：</div><div class="flowleft">{{{q.OptionE}}}</div></div>
                                    <div data="F" v-if="q.OptionF!=''" class="row"><div class="flowleft">F：</div><div class="flowleft">{{{q.OptionF}}}</div></div>
                                </div>
                                <div class="row answer" v-show="ShowAnswer">
                                    <div class="flowleft">答案：</div>
                                    <div class="flowleft ">
                                        {{GetchoiceAnswer(q.Q)}}
                                    </div>
                                </div>
                                <div class="row remark " v-show="ShowInfo">
                                    <div class="flowleft">解释：</div>
                                    <div class="flowleft ">
                                        {{{q.Description}}}
                                    </div>
                                </div>
                                <div class="toolbar row">
                                    <a class="btn btn-primary btn-xs" target="_blank" href='"@Url.Content("/Choice/Details?id=")"+ q.ID'>查看</a>
                                    <a class="btn btn-primary btn-xs" target="_blank" v-on:click="ShowQuestionDlg(true,cate,q)">修改</a>
                                    <a class="btn btn-danger btn-xs" v-on:click="deleteQuestion(cate,q)">移除</a>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-warning btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            转移到 <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li v-for="destCate in CategoryList | orderBy 'Sequence' ">
                                                <a v-show="cate.QuestionType==destCate.QuestionType&&cate.RandomKey!=destCate.RandomKey" v-on:click="moveQuestion(cate,destCate,q)">{{bigNum[destCate.Sequence] }}、{{destCate.Title}}</a>
                                            </li>
                                            <li><a v-on:click="moveQuestion(cate,q)">试题候选区</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <hr />
                        </template>
                        <div v-if=" cate.ChoiceList.length<=0">未添加任何题目</div>
                    </div>
                </div>
                <div v-else class='tab-pane fade panel  {{cate.Sequence==1?" in acitve":""}}' id="tab-{{cate.RandomKey}}">
                    <div class="panel-body">
                        <h4 class="row  big-title">
                            {{bigNum[cate.Sequence]}}
                            、
                            {{cate.Title}}
                            (每题默认
                            {{cate.ScorePerQuestion}}
                            分
                            )

                            <a class="btn btn-primary btn-sm" v-on:click="ShowCategoryDlg(true,cate)">修改</a>
                            <a class="btn btn-primary btn-sm" v-on:click="ShowQuestionDlg(false,cate)">添加试题</a>
                            <a class="btn btn-danger btn-sm" v-on:click="deleteCategory(cate)">删除</a>
                            <a class="btn btn-danger btn-sm" v-on:click="clearQuestion(cate)">清空试题</a>
                        </h4>
                        <template v-for="q in cate.EssayList | orderBy 'SmallQuestionNumber'">
                            <div class="panel-body question-content ">
                                @*@Html.Hidden("QuestionID", q.P.SmallQuestionNumber)*@
                                <div class="row question">
                                    <div class="flowleft question-number">{{q.SmallQuestionNumber}} 、</div>
                                    <div class="flowleft ">
                                        {{{q.Question}}}
                                        <span class="score">
                                            (
                                            {{q.Score}}
                                            分)
                                        </span>
                                    </div>
                                </div>
                                <div class="row answer" v-show="ShowAnswer">
                                    <div class="flowleft">答案：</div>
                                    <div class="flowleft ">
                                        {{{q.Answer}}}
                                    </div>
                                </div>
                                <div class="row remark" v-show="ShowInfo">
                                    <div class="flowleft">解释：</div>
                                    <div class="flowleft ">
                                        {{{q.Description}}}
                                    </div>
                                </div>
                                <div class="toolbar row">
                                    <a class="btn btn-primary btn-xs" target="_blank" href='"@Url.Content("/Essay/Details?id=")"+ q.ID'>查看</a>
                                    <a class="btn btn-primary btn-xs" target="_blank" v-on:click="ShowQuestionDlg(true,cate,q)">修改</a>
                                    <a class="btn btn-danger btn-xs" v-on:click="deleteQuestion(cate,q)">移除</a>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-warning btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            转移到 <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li v-for="destCate in CategoryList | orderBy 'Sequence' ">
                                                <a v-show="cate.QuestionType==destCate.QuestionType&&cate.RandomKey!=destCate.RandomKey" v-on:click="moveQuestion(cate,destCate,q)">{{bigNum[destCate.Sequence] }}、{{destCate.Title}}</a>
                                            </li>
                                            <li><a v-on:click="moveQuestion(cate,q)">试题候选区</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <hr />
                        </template>
                        <div v-if=" cate.EssayList.length<=0">未添加任何题目</div>
                    </div>
                </div>
            </template>
        </div>
        <div class="container">
        </div>
    </div>

</div>
@section Scripts
{
    <link rel="stylesheet" href="/Scripts/artDialog/css/ui-dialog.css">
    <script src="/Scripts/artDialog/dist/dialog-plus-min.js"></script>
    <script src="/Scripts/vue.min.js"></script>
    <script src="/Scripts/JSON2/json2.js"></script>
    <script>

        function findAndRemove(array, property, value) {
            array.forEach(function(result, index) {
                if(result[property] === value) {
                    //Remove from array
                    array.splice(index, 1);
                }
            });
        }
        function HtmlEncode(str) {
            var s = "";
            if (str.length == 0)
                return "";
            s = str.replace(/&/g, "&gt;");
            s = s.replace(/</g, "&lt;");
            s = s.replace(/>/g, "&gt;");
            s = s.replace(/\"/g, "&quot;");
            s = s.replace(/\n/g, "<br>");
            return s;
        }
        function HtmlDecode(str) {
            var s = "";
            if (str.length == 0) return "";
            s = str.replace(/&gt;/g, "&");
            s = s.replace(/&lt;/g, "<");
            s = s.replace(/&gt;/g, ">");
            s = s.replace(/&nbsp;/g, " ");
            s = s.replace(/"/g, "\"");
            s = s.replace(/&quot;/g, "\"");
            s = s.replace(/<br>/g, "\n");
            return s;
        }
        Vue.filter('EncodeQtNum',
            {
                read: function (value,qtype) {
                    console.log("read EncodeQtNum")
                    var pre;

                    if(qtype=="@QuestionType.SingleChoice.ToString()")pre= 'A';
                    if(qtype=="@QuestionType.MultipleChoice.ToString()")pre= 'B';
                    if(qtype=="@QuestionType.Completion.ToString()")pre= 'C';
                    if(qtype=="@QuestionType.ShortAnswer.ToString()")pre= 'D';
                    if(qtype=="@QuestionType.Discussion.ToString()")pre= 'E';
                    console.log(value);
                    console.log(qtype);
                    var code = "000000000000000000000" + value;
                    //var code="0000000000000000000";
                    code = code.substring(code.length - 12+1,code.length);
                    code = pre + code;
                    console.log(pre);
                    console.log(code)
                    console.log("-------------------read end------------------------")
                    return code;
                },
                write: function(value,old,qtype){
                    //var regex=;
                    console.log("write before replace:"+value)
                    var result=value.replace(/[ABCDEF]0*/,"")
                    console.log("write EncodeQtNum"+result)
                    console.log("-------------------write end------------------------")

                    return result;
                }
            }
        )

        //alert(JSON.stringify(clist))
        var vm;
        //var bigNum = "零一二三四五六七八九十";
        var newCategory= HtmlDecode("@newCategory")
        var newChoice= HtmlDecode("@newChoice")
        var newEssay= HtmlDecode("@newEssay")
        //var editingCategory=eval("("+newCategory+")")
        Alerter.turnOn();
        $(function () {
            var s= HtmlDecode("@jsonCategory")
            var index=@Model.Paper_QuestionCategory.Count();
            var clist = eval("(" +s +")");
            vm=  new Vue( {
                el: "#vueContent",
                data: {
                    CategoryList:clist,
                    NewCategoryIndex:index,
                    bigNum:"零一二三四五六七八九十",
                    ShowAnswer:true,
                    ShowInfo:true,
                    ShowOption:true,
                    EditingCategory:{},
                    isEditCategory:false,
                    isEditQuestion:false,
                    EditingQuestion:{},
                    OleQuestion:{}
                    //EditingQuestionExist:true
                },
                methods: {
                    GetCategory: function (randomKey) {
                        for(var i=0;i<this.CategoryList.length;i++){
                            console.log("GetCategory:"+i)
                            if(this.CategoryList[i].RandomKey==randomKey){
                                return this.CategoryList[i];
                            }
                        }
                        console.log("end")
                        console.log(this.CategoryList[i])
                    },

                    GetChoiceAnswer:function(q)
                    {
                        var r = "";
                        if (q.AisTrue) r += "A";
                        if (q.BisTrue) r += "B";
                        if (q.CisTrue) r += "C";
                        if (q.DisTrue) r += "D";
                        if (q.EisTrue) r += "E";
                        if (q.FisTrue) r += "F";
                        return r;
                    },
                    //GetJsonLength: function (jsonCategory){
                    //    var jsonLength = 0;
                    //    for(var item in jsonCategory){
                    //        jsonLength++;
                    //    }
                    //    return jsonLength;
                    //},
                    RefreshEditingQeuestion:function(){
                        var id=this.EditingQuestion.ID;
                        var qtype=this.EditingQuestion.QuestionType;
                        var vue=this;

                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("GetQuestion", "Essay")",
                            data: {id:id,qtype:qtype},
                            dataType: 'json',
                            success: function(data){
                                if(data.Success==1){
                                    console.log("ajax success:")
                                    var temp=vue.EditingQuestion;
                                    console.log(data.Data)
                                    console.log(temp)
                                    data.Data.SmallQuestionNumber=temp.SmallQuestionNumber;
                                    data.Data.Score=temp.Score;
                                    data.Data.BigQuestionNumber=temp.BigQuestionNumber;
                                    vue.EditingQuestion=data.Data;
                                    //this.EditingQuestion.Question=data.Data.Question;
                                    //this.EditingQuestion.=data.Data.Question;

                                    //this.EditingQuestion.Question=data.Data.Question;
                                    //this.EditingQuestion.Question=data.Data.Question;

                                    //data.Data.
                                    //vue.EditingQuestionExist=true;
                                }
                                else{
                                    vue.EditingQuestion.Question="";
                                    //alert(data.Message)
                                }
                            },
                            error:function(msg){
                                console.log("error"+msg);
                                vue.EditingQuestion.Question="";
                            }


                        })
                    },
                    GetQeuestion:function(cate,qid){
                    },
                    isChoice:function(cate){
                        if(cate.QuestionType.indexOf("Choice")>=0)return true;
                        return false;
                    },
                    deleteQuestion:function(cate,q) {
                        if(this.isChoice(cate)) findAndRemove(cate.ChoiceList, "ID", q.ID)
                        else
                            findAndRemove(cate.EssayList, "ID", q.ID)
                    },
                    moveQuestion:function (srcCate,destCate,q){
                        if(this.isChoice(srcCate)){
                            var id=q.ID;
                            q.BigQuestionNumber=destCate.Sequence;
                            q.SmallQuestionNumber=destCate.ChoiceList.length+1
                            destCate.ChoiceList.push(q)
                            findAndRemove(srcCate.ChoiceList,"ID",id)

                        }
                        else{
                            var id=q.ID;
                            q.BigQuestionNumber=destCate.Sequence;
                            q.SmallQuestionNumber=destCate.EssayList.length+1
                            destCate.EssayList.push(q)
                            findAndRemove(srcCate.EssayList, "ID", id)

                        }
                    },
                    deleteCategory:function(e) {
                        if (confirm("确定要删除当前的大题吗？")) {
                            var i=0;
                            findAndRemove( this.CategoryList,"RandomKey",e.RandomKey);

                            for(var item in this.CategoryList){
                                item=this.CategoryList[i]
                                if(item.Sequence>e.Sequence)
                                {
                                    //console.log(     item.Sequence)
                                    item.Sequence-=1;
                                }
                                i++;
                            }
                            //GetCategory(e.RandomKey).splice()
                            //e.splice()
                        }
                    },
                    clearQuestion:  function (e) {
                        //var a=Array()
                        e.ChoiceList=[];
                        e.EssayList=[];
                    },
                    ShowQuestionDlg :function (isEdit,cate,q) {
                        this.isEditQuestion=isEdit;
                        var vue=this;
                        var QtDlg;
                        if(isEdit){
                            this.OleQuestion=q;
                            if(this.isChoice(cate)){
                                this.EditingQuestion=$.extend({}, q)
                                //this.EditingQuestion.AisTrue=q.AisTrue;
                                //this.EditingQuestion.BisTrue=q.BisTrue;
                                //this.EditingQuestion.CisTrue=q.CisTrue;
                                //this.EditingQuestion.DisTrue=q.DisTrue;
                                //this.EditingQuestion.EisTrue=q.EisTrue;
                                //this.EditingQuestion.FisTrue=q.FisTrue;
                                //this.EditingQuestion.AisTrue=q.AisTrue;
                                //this.EditingQuestion.BisTrue=q.BisTrue;
                                //this.EditingQuestion.CisTrue=q.CisTrue;
                                //this.EditingQuestion.DisTrue=q.DisTrue;
                                //this.EditingQuestion.EisTrue=q.EisTrue;
                                //this.EditingQuestion.FisTrue=q.FisTrue;


                                //this.EditingQuestion=eval("("+newChoice+")");
                                //this.EditingQuestion=cate.Sequence;
                                //this.EditingQuestion.Title=cate.Title;
                                //this.EditingQuestion.ScorePerQuestion =cate.ScorePerQuestion
                                //this.EditingQuestion.RandomKey=cate.RandomKey;
                            }else{
                                this.EditingQuestion=$.extend({}, q)

                            }
                            console.log(this.EditingQuestion)
                            QtDlg = dialog({
                                title: cate.Title+ '修改题目',
                                content: $("#QuestionDlgTemplate"),
                                okValue: '更新',
                                ok: function () {
                                    vue.UpdateQuestion(cate)
                                },
                                cancel: true,
                                cancelValue:'取消'
                            })
                        }
                        else{
                            if(this.isChoice(cate)){
                                console.log(newChoice)
                                this.EditingQuestion=eval("("+newChoice+")")
                                this.EditingQuestion.SmallQuestionNumber=cate.ChoiceList.length+1;

                            }
                            else{
                                console.log(newEssay)

                                this.EditingQuestion=this.EditingQuestion=eval("("+newEssay+")")
                                this.EditingQuestion.SmallQuestionNumber=cate.EssayList.length+1;

                            }
                            this.EditingQuestion.QuestionType=cate.QuestionType;
                            //this.EditingQuestion.Score=cate.ScorePerQuestion;
                            this.EditingQuestion.BigQuestionNumber=cate.Sequence;
                            this.EditingQuestion.Score=cate.ScorePerQuestion;
                            QtDlg = dialog({
                                title: '添加试题',
                                content: $("#QuestionDlgTemplate"),
                                okValue: '添加',
                                ok: function () {
                                    vue.AddQuestion(cate);
                                },
                                cancel: true,
                                cancelValue:'取消'
                            })
                        }
                        console.log("Qtype:"+ this.EditingQuestion.QuestionType)
                        console.log("ed.id:"+ this.EditingQuestion.ID)
                        QtDlg.showModal();
                    },
                    AddQuestion :function(cate){
                        if(this.isChoice(this.EditingQuestion)){
                            console.log("addQuestion:")
                            console.log(this.EditingQuestion)
                            cate.ChoiceList.push(this.EditingQuestion)
                        }else{
                            cate.EssayList.push(this.EditingQuestion)
                        }
                    },
                    UpdateQuestion :function(cate){
                        if(this.isChoice( this.EditingQuestion)){
                            findAndRemove(cate.ChoiceList,"ID",this.OleQuestion.ID);
                            cate.ChoiceList.push(this.EditingQuestion)
                        }else{

                            findAndRemove(cate.EssayList,"ID",this.OleQuestion.ID);
                            cate.EssayList.push(this.EditingQuestion)
                        }
                    },
                    ShowCategoryDlg :function (isEdit,cate) {
                        this.isEditCategory=isEdit;
                        var vue=this;
                        var CateDlg;
                        if(isEdit){
                            this.EditingCategory=eval("("+newCategory+")");
                            this.EditingCategory.Sequence=cate.Sequence;
                            this.EditingCategory.Title=cate.Title;
                            this.EditingCategory.ScorePerQuestion =cate.ScorePerQuestion
                            this.EditingCategory.RandomKey=cate.RandomKey;

                            CateDlg = dialog({
                                title: '编辑大题',
                                content: $("#QuestionCategoryDlgTemplate"),
                                okValue: '更新',
                                ok: function () {
                                    vue.UpdateCategory()
                                },
                                cancel: true,
                                cancelValue:'取消'
                            })
                        }
                        else{
                            this.EditingCategory=eval("("+newCategory+")");
                            this.EditingCategory.Sequence=this.CategoryList.length+1;
                            if(this.EditingCategory.Sequence>11){alert("大题数过多，添加失败！");return;}
                            CateDlg = dialog({
                                title: '添加大题',
                                content: $("#QuestionCategoryDlgTemplate"),
                                okValue: '添加',
                                ok: function () {
                                    vue.AddCategory();
                                },
                                cancel: true,
                                cancelValue:'取消'
                            })
                        }
                        CateDlg.showModal();
                    },
                    showQuestionCategoryModel:  function (num) {
                        if (num == null || num == undefined) {
                        }
                        if (num < 0 || num > 9) { alert("错误"); return; }
                    },
                    AddCategory: function () {
                        this.EditingCategory.RandomKey=++this.NewCategoryIndex;
                        this.CategoryList.push(this.EditingCategory)
                    },
                    UpdateCategory: function () {
                        var item= this.GetCategory(this.EditingCategory.RandomKey);
                        item.Title=this.EditingCategory.Title;
                        item.Sequence=this.EditingCategory.Sequence
                        item.ScorePerQuestion=this.EditingCategory.ScorePerQuestion;

                    }

                }
            })
            $("#myTab").find("li:eq(0)").find("a").click();;
            $(".tab-pane").find("hr:last").remove();
        })//$(fncion)
    </script>
}
