@model OnlineExam.Models.TestPaper
@{
    var title = "试卷信息";
    string BigNum = "零一二三四五六七八九十";
}


<div class="form-horizontal">
    <h4>@title</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2 " })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = " disable form-control   " } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ExamType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.DropDownList("ExamType", Utitlity.GetExamTypeSelectList().AsEnumerable(), new { @class = " disable form-control " })
            @Html.ValidationMessageFor(model => model.ExamType, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SubjectID, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{Html.RenderPartial("_SubjectDropDownList");
            }
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExamTime, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.TextBoxFor(model => model.ExamTime, new { @class = " disable form-control " })
            @Html.ValidationMessageFor(model => model.ExamTime, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.TimeDuration, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @*<input name="TimeDuration" id="TimeDuration" value="@Model.TimeDuration" type="number" class=" disable form-control " min="5" max="2000" />*@
            @Html.TextBoxFor(model => model.TimeDuration, new { @class = " disable form-control ", type = "number", min = "5", max = "1000" })
            @Html.ValidationMessageFor(model => model.TimeDuration, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Info, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Info, new { @class = " disable form-control ", col = "100", row = "5" })
            @Html.ValidationMessageFor(model => model.Info, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            @Html.Hidden("QuestionCategory")
            <table class="table" id="QList">

                <tr>
                    <td class="col-md-1">题号</td>
                    <td class="col-md-5">题目名称</td>
                    <td class="col-md-2">题型</td>
                    <td class="col-md-1">每题默认分数</td>
                    <td class="col-md-1"></td>
                </tr>

                @foreach (var cate in Model.Paper_QuestionCategory)
                {
                <tr>
                    <td class="col-md-1">@BigNum[cate.Sequence]</td>
                    <td class="col-md-5">@Html.TextBox("qname1", Utitlity.ParseQuestionType(cate.QuestionType).GetInfo(), new { @class = " disable form-control  col-md-12" })</td>
                    <td class="col-md-2">@Html.DropDownList("qtype1", Utitlity.GetQuestionTypeSelectList().AsEnumerable(), Utitlity.ParseQuestionType(cate.QuestionType).GetInfo(), new { @class = " disable form-control  col-md-12" })</td>
                    <td class="col-md-1"><input type="number" value="@cate.ScorePerQuestion" min="1" max="100" class=" disable form-control  width80" /></td>
                    <td class="col-md-1"><a class="bg-danger" onclick="delQuestionCate(this);">删除</a></td>

                </tr>
                }

            </table><div><div><a class="btn btn-sm btn-success" onclick="addQuestionCate();">添加</a></div></div>
        </div>

        <div class="col-md-2">
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(model => model.Audit, htmlAttributes: new { @class = "  col-sm-1 " })
        @Html.Partial("_AuditImage", Model.Audit)
    </div>
    @if (Model.Audit == Auditing.Fail)
    {
        <div class="row">
            @Html.LabelFor(model => model.Assessment, htmlAttributes: new { @class = "  col-sm-1 " })
            <div class="col-sm-10">
                @Html.Raw(Model.Assessment)
            </div>
        </div>
    }
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @Html.ActionLink("修改", "Edit", "TestPaper", new { id = Model.ID }, new { @class = "btn btn-default" })
            <a class="btn btn-default" onclick="OpenAuditDlg()">审核</a>
            <a class="btn btn-default" onclick="deleteItem()">删除</a>
        </div>
    </div>
</div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @*<link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />*@
    <script src="@Url.Content("~/Scripts/jquery.address.js")"></script>
    @*<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>*@
    <script src="@Url.Content("~/Scripts/jquery.bootpag.min.js")"></script>
    <script src="@Url.Content("~/Scripts/QueryString.js")"></script>
    <script src="/Scripts/DatetimePicker/build/jquery.datetimepicker.full.min.js"></script>
    <link href="/Scripts/DatetimePicker/jquery.datetimepicker.css" rel="stylesheet" />
    <script src="/Scripts/JSON2/json2.js"></script>
    <link rel="stylesheet" href="/Scripts/artDialog/css/ui-dialog.css">
    <script src="/Scripts/artDialog/dist/dialog-plus-min.js"></script>
    <script>
        var bigNum = "零一二三四五六七八九十";



        function deleteItem() {
            var id = '@Model.ID'
            if (confirm("确定要删除选中的题目吗?")) {
                $.ajax({
                    url: '@Url.Action("Delete")',
                    data: { ID: id },
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                        if (data.Success == 0) {
                            alert("提交失败");
                        } else {
                            window.location.href = '@Url.Action("Index",new { })'
                        }
                    }
                });
            }
        }
        function SumitAudit(audit) {
            var s1 = $("#txtAssessment").val();
            if (s1 == null || s1 == undefined) s1 = $("#txtAssessment").text();

            $.ajax({
                url: '@Url.Content("~/TestPaper/Censor")',
                data: { ID: '@Model.ID', Assessment: s1, Audit: audit },
                type: "POST",
                dataType: "json",
                success: function (data) {
                    if (data.Success == 0) {
                        alert("提交失败");
                    } else {
                        window.location.reload();
                    }
                }
            });
        }
        function OpenAuditDlg() {
            var dlg = dialog({
                title: '审核',
                content: '<textarea id="txtAssessment" cols="100" rows="5"></textarea>',
                button: [
                          {
                              value: '不通过',
                              callback: function () {
                                  SumitAudit('@Auditing.Fail')
                                  return false;
                              }
                          }],
                okValue: '通过',
                ok: function () {
                    SumitAudit('@Auditing.Pass')
                    return false;
                },
                cancleDisplay: false
            });
            dlg.show();
        }
        $(function () {
            Alerter.turnOn();

            $.datetimepicker.setLocale('zh');
            $("#ExamTime").datetimepicker(
                       {

                           lang: "zh",
                           //timepicker: false,
                           format: 'Y-m-d H:i'
                           //formatDate:
                       }
                       )
            $("#ExamType").val("@Model.ExamType")

            SetQtype();
        })
        //function QcateSerialize() {
        //    var data = new Array($("#QList").find("tr:gt(0)").length);
        //    var result = "";
        //    var i = 0;
        //    $("#QList").find("tr:gt(0)").each(function () {
        //        Alerter.info("行" + i)
        //        var o = {
        //            Sequence: bigNum.indexOf($(this).find("td:eq(0)").text()),
        //            Title: $(this).find("td:eq(1)").children().val(),
        //            QuestionType: $(this).find("td:eq(2)").find('select').children(':selected').val(),
        //            ScorePerQuestion: $(this).find("td:eq(3)").children().val(),
        //        }
        //        Alerter.info(JSON.stringify(o));
        //        result += JSON.stringify(o) + "\r\n";
        //        data[i] = o;
        //        i++;
        //    })
        //    $("#QuestionCategory").val(result);
        //    //result+=  JSON.stringify(data)+"\r\n";
        //    $("form").submit();
        //    //for (var j = 0; j < i; j++) Alerter.list(data[j].Sequence, data[j].Title, data[j].QuestionType, data[j].ScorePerQuestion)

        //    //return false;

        //}
        function SetQtype() {
            $("#temp").find("tr").each(
                function () {
                    Alerter.info($(this).find("[type='hidden']").val())
                    Alerter.info($(this).find("select").val())
                    $(this).find("select").val($(this).find("[type='hidden']").val());
                    Alerter.info($(this).find("select").val())
                }
                )


        }
        @*function addQuestionCate() {
            var index = $("#QList").find("tr").length;
            if (index > 10) alert("添加失败，题数过多！");
            Alerter.info(index)
            $("#temp").find("tr").find("td:first").text(bigNum[index]);
            var content = $("#temp").find("tr").html();
            var row = "<tr>" + content + "</tr>"
            $("#QList").append(row);
            $("#QList").find("tr:last").find("select").val("@QuestionType.ShortAnswer.ToString()");//默认选择简答题
            Alerter.info(row);
        }*@
        //function delQuestionCate(e) {
        //    $(e).parent().parent().remove();
        //    reOrder();
        //}
        //function reOrder() {
        //    var index = 1;
        //    $("#QList").find("tr:gt(1)").each(function () {
        //        Alerter.info(index);
        //        $(this).find("td:first").text(bigNum[index]);
        //        Alerter.info(bigNum[index]);
        //        index++;
        //    })

        //}
    </script>

}
