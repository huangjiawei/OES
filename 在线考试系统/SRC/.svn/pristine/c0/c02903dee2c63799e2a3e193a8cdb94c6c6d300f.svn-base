using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Runtime;
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;
namespace OnlineExam.Models
{
    public class ImportPaper
    {
        [Key]
        public int ID { get; set; }
        public string ExamTitle { get; set; }//标题
        public string Grade { get; set; }//年级
        public string Year { get; set; }//试卷年份
        public string SubjectName { get; set; }
        public string SubSubjectName { get; set; }//科目的子名称(上册、下册、必修一等)


        public string ExamType { get; set; }

        public ImportPaper()
        {
            ID = 0;
            ExamTitle = ""; Grade = ""; Year = "";
            SubjectName = ""; SubSubjectName = "";
            name = ""; TotleScore = 0;
            Answers = new List<ImportAnswer>();
            Questions = new List<ImportQuestion>();
        }
        public string name { get; set; }
        public int TotleScore { get; set; }
        public int SingleChoiceQuantity { get; set; }
        public int SingleChoiceGrade { get; set; }
        public int ChoiceQuantity { get; set; }
        public int ChoiceGrade { get; set; }
        public int CompletionQuantity { get; set; }
        public int CompletionGrade { get; set; }
        public int ShortAnswerQuantity { get; set; }
        public int ShortAnswerGrade { get; set; }
        public int DiscussionQuantity { get; set; }
        public int DiscussionGrade { get; set; }
        public List<ImportAnswer> Answers { get; set; }
        public List<ImportQuestion> Questions { get; set; }
        public void CombineAnswer()
        {
            foreach (var a in Answers)
            {
                var query = Questions.Where(m => m.QuestionNum == a.Num && (a.BigNum == 0 || a.BigNum == m.BigNum));
                if (query.Count() == 1)
                {
                    var q = query.Single();
                    q.Answer = a.Answer;
                }
            }
        }
        //List<QuestionChoice> ChoiceList;
        //List<QuestionEssay> ShortAnswerList;
        //List<QuestionEssay> DiscussionList;
        //List<QuestionChoice> SingleChoiceList;
        //List<QuestionEssay> CompletionList;
        //List<Resource> QuestionResult;
        public void Standardize()
        {

        }
    }
    public class ImportAnswer
    {
        public int BigNum { get; set; }//大题号
        public int Num { get; set; }//题目编号
        public string Answer { get; set; }//答案
        public string Info { get; set; }//题解、备注、评分标准
        public ImportAnswer()
        {
            Num = 0; Answer = ""; Info = "";
            BigNum = 0;
        }
    }

    public class ImportQuestion
    {
        public int ID { get; set; }
        public string QuestionBigNum { get; set; }
        public int BigNum { get; set; }
        public int QuestionNum { get; set; }
        public QuestionType QType { get; set; }
        public string Question { get; set; }
        public string Answer { get; set; }
        public string Info { get; set; }
        public List<Option> Options { get; set; }
        public ImportQuestion()
        {
            QuestionBigNum = "";
            BigNum = -1;
            QuestionNum = -1;
            QType = QuestionType.UnKnown;
            Question = "";
            Answer = "";
            Info = "";
            Options = new List<Option>();
        }
        public void Standardize()
        {
            string rexSingleOption = @"(\s?)([\(（]?)[A-Fa-f]([\)）、\.．，, ]).*?((?=\2[a-fA-F]\3)|(\r\n)|\n|$)"; //匹配选项 
            char[] c1 ={ 'a','b','c','d','e','f' };
            char[] c2 = { 'A', 'B', 'C', 'D', 'E', 'F' };
            List<Option> newOps = new List<Option>();
            if (Options.Count > 0)
            {
                if (Options.Count < 3)
                {
                    var content = Options[0].Content;
                    Match m = Regex.Match(content, rexSingleOption);
                    while (m.Success)
                    {
                        Option op = new Option();
                        op.Op = m.Value.Substring(0, 1);
                        op.Op = m.Value.Substring(2);
                        newOps.Add(op);
                        m = m.NextMatch();
                    }
                }
            }
        }

        public QuestionChoice ToChoice()
        {
            QuestionChoice q = new QuestionChoice();
            q.Question = Question;
            foreach (var op in Options)
            {
                switch (op.Op)
                {
                    case "a":
                    case "A":
                        q.OptionA = op.Content;
                        break;
                    case "B":
                    case "b":
                        q.OptionB = op.Content;
                        break;
                    case "c":
                    case "C":
                        q.OptionC = op.Content;
                        break;
                    case "d":
                    case "D":
                        q.OptionD = op.Content;
                        break;
                    case "E":
                    case "e":
                        q.OptionE = op.Content;
                        break;
                    case "f":
                    case "F":
                        q.OptionF = op.Content;
                        break;
                }
            }
            int RightCount = 0;
            foreach (char c in Answer)
            {
               
                switch (c)
                {
                    case 'a':
                    case 'A':
                        q.AisTrue = true; RightCount++;
                        break;
                    case 'B':
                    case 'b':
                        q.BisTrue = true; RightCount++; break;
                    case 'c':
                    case 'C':
                        q.CisTrue = true; RightCount++; break;
                    case 'd':
                    case 'D':
                        q.DisTrue = true; RightCount++; break;
                    case 'E':
                    case 'e':
                        q.EisTrue = true;  RightCount++;break;
                    default:break;
                }
            }
            q.IsMultiple = RightCount >= 2;
            q.Audit = Auditing.Unreviewed;
            return q;
        }
 
   
        public QuestionEssay ToEssay(string qt)
        {
            QuestionEssay q = new QuestionEssay();
            q.Question = Question;
            q.QuestionType = qt;
            q.Answer = Answer;
            q.Audit = Auditing.Unreviewed;
            return q;
        }
        public object ToSpecificQuestion()
        {
            object o;
            switch (QType)
            {
                case QuestionType.SingleChoice:
                case QuestionType.MultipleChoice:
                    o = ToChoice();
                    break;

                case QuestionType.Completion:                   
                case QuestionType.Discussion:
                   
                default:
                     o = ToEssay(QType.ToString());                    
                    break;
            }
            return o;

        }
    }
    public class Option
    {
        public string Op { get; set; }
        public string Content { get; set; }
        public Option(string o, string c) { Op = o; Content = c; }
        public Option(string o) { Op = o; }
        public Option()
        {
            Op = "";
            Content = "";
        }
    }
}