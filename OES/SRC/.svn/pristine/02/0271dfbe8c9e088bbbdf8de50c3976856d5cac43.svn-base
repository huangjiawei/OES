using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using OnlineExam.Models;
using MvcContrib.UI.Grid;

namespace OnlineExam.Controllers.Background
{
    public class MultipleChoiceController : Controller
    {
        // GET: MultipleChoice
        Models.ExamEntities ee = new ExamEntities();
        int PageSize = CKey.DefaultPageCount;
        public ActionResult Index(string searchWord, int? frequency, int? difficulty, int? audit, DataView? viewType, int? pageSize, GridSortOptions gridSortOptions, int? page)
        {

            ViewData["ViewType"] = viewType;
            int CurrentPageSize = 0;
            if (!pageSize.HasValue)
                CurrentPageSize = (viewType == DataView.GridView ? CKey.GridViewPageCount : CKey.DataListPageCount);
            else CurrentPageSize = pageSize.Value;
            var pagedViewModel = new PagedViewModel<QuestionMultipleChoice>
            {
                ViewData = ViewData,
                Query = ee.QuestionMultipleChoice.AsQueryable(),
                GridSortOptions = gridSortOptions,
                DefaultSortColumn = "ID",
                Page = page,
                PageSize = CurrentPageSize
            }
            .AddFilter("searchWord", searchWord, a => a.Question.Contains(searchWord) || a.ModificationTeacher.Contains(searchWord) || a.OptionA.Contains(searchWord) || a.OptionA.Contains(searchWord) || a.OptionB.Contains(searchWord) || a.OptionC.Contains(searchWord) || a.OptionD.Contains(searchWord))
            //.AddFilter("genreId", genreId, a => a.GenreId == genreId, _service.GetGenres(), "Name")
            //.AddFilter("artistId", artistId, a => a.ArtistId == artistId, _service.GetArtists(), "Name")
        ;
            if (frequency.HasValue && frequency.Value != -1) { pagedViewModel.AddFilter("frequency", frequency, a => a.Frequency == frequency.Value); }

            if (difficulty.HasValue && difficulty.Value != -1) { pagedViewModel.AddFilter("difficulty", difficulty, a => a.Difficulty == difficulty.Value); }

            if (audit.HasValue && audit.Value != -1)
            {
                bool isCensor = audit.Value == 1 ? true : false;
                pagedViewModel.AddFilter("audit", audit, a => a.Audit == isCensor);
            }
            pagedViewModel.Setup();
            //ViewData = pagedViewModel.ViewData;
            return View(pagedViewModel);
        }

        // GET: MultipleChoice/Details/5
        public ActionResult Details(int id)
        {
            var q = ee.QuestionMultipleChoice.Where(m => m.ID == id).SingleOrDefault();
            if (q == null || q.ID != id) RedirectToAction("");
            return View(q);
        }

        // GET: MultipleChoice/Create
        //[ValidateInput(false)]
        public ActionResult Create()
        {

            return View();
        }

        // POST: MultipleChoice/Create
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult Create(QuestionMultipleChoice Model)
        {
            try
            {
                Model.ID = -1;
                Model.DateAdded = DateTime.Now;
                Model.ModificationDate = DateTime.Now;
                if (System.Web.HttpContext.Current.User.Identity.IsAuthenticated)
                    Model.ModificationTeacher = System.Web.HttpContext.Current.User.Identity.Name;
                else
                {
                    Model.ModificationTeacher = "System";
                }
                if (ModelState.IsValid)
                {
                    ee.QuestionMultipleChoice.Add(Model);
                    ee.SaveChanges();

                    // TODO: Add insert logic here

                    return RedirectToAction("Index");
                }
                else return View(Model);
            }
            catch (Exception e)
            {
                //throw e;
                return View(Model);
            }
        }
        // GET: MultipleChoice/Edit/5
        public ActionResult Edit(int id)
        {
            var q = ee.QuestionMultipleChoice.Where(m => m.ID == id).SingleOrDefault();
            if (q == null || q.ID != id) RedirectToAction("");
            return View(q);
        }
        // POST: MultipleChoice/Edit/5
        [HttpPost]
        public ActionResult Edit(QuestionMultipleChoice m)
        {

            if (ModelState.IsValid)
            {
                ee.Entry(m).State = System.Data.Entity.EntityState.Modified;
                ee.SaveChanges();

                return RedirectToAction("Detail", new { id = m.ID });
            }
            else
            {
                return View(m);
            }

        }
        // GET: MultipleChoice/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
    }
}
