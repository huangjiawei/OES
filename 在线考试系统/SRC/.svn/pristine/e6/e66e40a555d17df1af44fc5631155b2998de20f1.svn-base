using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using OnlineExam.Models;
namespace OnlineExam
{
    public class Utitlity
    {
        //对问题进行编码
        public static string EncodeQuestionID(long id, QuestionType qtype)
        {
            string code = "000000000000000000000" + id.ToString();
            code = code.Substring(code.Length - 12);
            string pre = Convert.ToChar((Convert.ToInt32('A') + Convert.ToInt32(qtype) - 1)).ToString();
            code = pre + code;
            return code;
        }
        //判断CkEditor控件的内容是否为空
        public static bool IsEditorEmpty(string txt)
        {
            if (txt == null || txt.Trim() == "" || txt.Trim() == "<p></p>") return true;
            return false;

        }
        public static QuestionMultipleChoice ModelStandardize(QuestionMultipleChoice q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";
            if (IsEditorEmpty(q.OptionA)) q.OptionA = null;
            if (IsEditorEmpty(q.OptionB)) q.OptionB = null;

            if (IsEditorEmpty(q.OptionC)) q.OptionC = null;
            List<OptionItem> list = new List<OptionItem>();
            if (!IsEditorEmpty(q.OptionD)) list.Add(new OptionItem(q.OptionD, q.DisTrue));
            if (!IsEditorEmpty(q.OptionE)) list.Add(new OptionItem(q.OptionE, q.DisTrue));
            if (!IsEditorEmpty(q.OptionF)) list.Add(new OptionItem(q.OptionF, q.DisTrue));

            #region 用于重组可选选项
            if (IsEditorEmpty(q.OptionD))
            {

                if (IsEditorEmpty(q.OptionE))
                {

                    if (IsEditorEmpty(q.OptionF))
                    {
                        //三个可选答案皆为空，不需重组
                    }
                    else
                    {
                        q.OptionD = q.OptionF;
                        q.DisTrue = q.EisTrue;
                        q.OptionF = "";
                        q.FisTrue = false;
                    }

                }
                else
                {
                    q.OptionD = q.OptionE;
                    q.DisTrue = q.EisTrue;
                    q.OptionE = "";
                    q.EisTrue = false;
                }
            }

            if (IsEditorEmpty(q.OptionE))
            {

                if (!IsEditorEmpty(q.OptionF))
                {
                    q.OptionE = q.OptionF;
                    q.EisTrue = q.EisTrue;
                    q.OptionF = "";
                    q.FisTrue = false;
                }
            }
            #endregion
            //if (IsEditorEmpty(q.OptionD)) { q.OptionD = "";
            //if (IsEditorEmpty(q.OptionE)) q.OptionE = "";
            //if (IsEditorEmpty(q.OptionF)) q.OptionF = "";
            return q;
        }
        public static QuestionSingleChoice ModelStandardize(QuestionSingleChoice q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";
            if (IsEditorEmpty(q.OptionA)) q.OptionA = null;
            if (IsEditorEmpty(q.OptionB)) q.OptionB = null;
            #region 用于重组可选选项
            if (IsEditorEmpty(q.OptionC))
            {

                if (IsEditorEmpty(q.OptionD))
                {

                    if (IsEditorEmpty(q.OptionE))
                    {
                        //三个可选答案皆为空，不需重组
                    }
                    else
                    {
                        q.OptionC = q.OptionE;
                        q.CisTrue = q.DisTrue;
                        q.OptionE = "";
                        q.EisTrue = false;
                    }

                }
                else
                {
                    q.OptionC = q.OptionD;
                    q.CisTrue = q.DisTrue;
                    q.OptionD = "";
                    q.DisTrue = false;
                }
            }

            if (IsEditorEmpty(q.OptionD))
            {

                if (!IsEditorEmpty(q.OptionE))
                {
                    q.OptionD = q.OptionE;
                    q.DisTrue = q.DisTrue;
                    q.OptionE = "";
                    q.EisTrue = false;
                }
            }
            #endregion


            //if (IsEditorEmpty(q.OptionC)) q.OptionC = "";
            //if (IsEditorEmpty(q.OptionD)) q.OptionD = "";
            //if (IsEditorEmpty(q.OptionE)) q.OptionE = "";
            return q;
        }
        public static QuestionShortAnswer ModelStandardize(QuestionShortAnswer q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";

            return q;
        }
        public static QuestionDiscussion ModelStandardize(QuestionDiscussion q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";

            return q;
        }
        public static QuestionCompletion ModelStandardize(QuestionCompletion q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";

            return q;
        }
    }
    public class OptionItem
    {
        public string Answer;
        public bool IsRight;
        public OptionItem(string answer, bool isRight)
        {
            Answer = answer;
            IsRight = isRight;
        }

    }
    public class CKey
    {
        public static readonly string DefaultSearchKeyWord = "查询关键字";
        public static readonly int DefaultPageCount = 10;

        public static readonly int DataListPageCount = 10;
        public static readonly int GridViewPageCount = 20;

        //grid表格中的题目字段的最大长度
        public static readonly int QuestionTitleSummaryLenght = 5;
        //grid表格中的题目的描述字段的最大长度
        public static readonly int QuestionDescriptionSummaryLenght = 4;

        
    }
    public class Auditing
    {
        public static readonly int Pass =1;//审核通过
        public static readonly int Fail = -1;//审核不通过i        
        public static readonly int Unreviewed = 0;//暂未审核

    }
    public enum EditType
    {
        Edit = 0,
        Create
    }
    public class CUrl
    {
        public static readonly string QuestionResourceDir = System.Web.HttpContext.Current.Server.MapPath("~/QuestionBankResource/");
        public static readonly string QuestionResource = "/QuestionBankResource/";
    }
    public enum QuestionType
    {
        SingleChoice = 1,
        MultipleChoice,
        Completion,
        ShortAnswer,
        Discussion

    }
    public enum DataView
    {
        GridView = 1,
        DataList = 2
    }
    public class JsonReturn
    {
        public int Success;
        public string Message;
        public string Result;

    }
}
