using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using NetOffice;
using Word = NetOffice.WordApi;
using NetOffice.WordApi.Enums;
using System.Text;
//using System.IO;
//using DocumentFormat.OpenXml;
//using DocumentFormat.OpenXml.Packaging;
//using DocumentFormat.OpenXml.Wordprocessing;
//using A = DocumentFormat.OpenXml.Drawing;
//using DW = DocumentFormat.OpenXml.Drawing.Wordprocessing;
//using PIC = DocumentFormat.OpenXml.Drawing.Pictures;
//using System.IO.Packaging;
using System.Text.RegularExpressions;
using OnlineExam.Models;
namespace OnlineExam
{
    public class PaperImporter
    {
        bool isNum(char c)
        {

            return c >= '0' && c <= '9';
        }
        bool isBigNum(char c)
        {
            return bigNum.Contains(c);
        }
        //^[\(（]?[1234567890]{1,3}[\)）、\.．，,](.*((\r\n)|\s))+
        static string rexEntry = @"((\r\n)|\s)";
        static string rexNewContent = @"^[\[（【]?(([0-9一二三四五六七八九十]{1,3})|([a-fA-F])|(参考答案))[\)\]）】:：\.．、]";
        static string rexEnd = "(?!(" + rexNewContent + "))";  //
        static string rexBigNum = @"^(?<=[\(（])?[一二三四五六七八九十]{1,2}(?=[\)）、\.．，, ].+)";//匹配大题题号
        //static string rexBigNum = @"^[\(（]?[一二三四五六七八九十]{1,2}[\)）、\.．，, ]";
        static string rexSmallNum = @"^[\(（]?[1234567890]{1,3}[\)）、\.．，, ]";
        static string rexBigTitle = rexBigNum + @"[\S\s]*?(题|分).*";  //大题标题t
        // rexQuestion: ^[\(（]?[1234567890]{1,3}[\)）、\.．，, ](.*((\r\n)|\s)(?!([\[（【]?(([0-9一二三四五六七八九十]{1,3})|([a-fA-F])|(参考答案))[\)\]）】:：\.．、])))+
        //static string rexQuestion = string.Format("{0}(.*{1}{2})+", rexSmallNum, rexEntry, rexEnd);
        static string rexQuestionNum = @"^(?<=[\(（])?[1234567890]{1,3}(?=[\)）、\.．，, ].*)";
        static string rexOption = @"^[\(（]?[A-Fa-f][\)）、\.．，, ].*"; //匹配选项 
        static string rexSingleOption = @"(\s|^)[\(（]?[A-Fa-f][\)）、\.．，, ]\S*"; //匹配选项 
        //static string rexOptionList = rexOption + "{1,6}";
        static string rexAnswer = @"^(?:[【\[\(（]?)(?:.{0,3}(答案)|(答)[】）\):：\s])";
        static string rexRemark = @"^[【\[\(（]?(.{0,4}((提示)|(解析)|(解释)|(分析)|(评分标准)))[】）\):：\s]";
        static string rexAnswerInQuestion = @" ^ (?:[【\[\(（]?)(?:.{0,3}(答案)|(答)[】）\):：\s])(.*)";//匹配问题附属的参考答案
        static string rexQuestionRemark = @"^[【\[\(（]?(.{0,4}((提示)|(解析)|(解释)|(分析)|(评分标准)))[】）\):：\s]{1,2}.*";//匹配问题附属的参考答案
        //static string 


        static char[] mark = new char[] { '.', '、', ')', '）' };
        static char[] bigNum = new char[] { '一', '二', '三', '四', '五', '六', '七', '八', '九', '十' };
        static char[] bracket = new char[] { '【', '】' };
        static char[] optionType1 = new char[] { 'A', 'B', 'C', 'D', 'E', 'F' };
        static char[] optionType2 = new char[] { 'a', 'b', 'c', 'd', 'e', 'f' };
        static char[] optionType3 = new char[] { '①', '②', '③', '④', '⑤', '⑥' };

        static string[] singleChoiceTitle = new string[] { "单选题", "单项选择题", "选择题" };
        static string[] multipleChoiceTitle = new string[] { "多项选择题", "多选题", "选择题" };
        static string[] shortAnswerTitle = new string[] { "简答题", "回答", "计算", "小题" };
        static string[] completionTitle = new string[] { "填空题", "填空" };
        static string[] discTitle = new string[] { "议论题", "应用题", "大题" };
        static Dictionary<QuestionType, string[]> dictQtypeTitle = new Dictionary<QuestionType, string[]>();

        static string[] answer = new string[] { "答案", "参考答案", "回答", "解答" };
        static string[] answerEnd = new string[] { " ", "]", "】", ":", "、" };
        static string[] remark = new string[] { "解释", "解析", "解题思路", "提示", "备注", "解题方法", "方法" };
        static string[] examType = new string[] { "模拟", "测试", "自测", "期末考试", "期中考试" };
        static List<string> subjectList = new List<string>();
        static List<string> subjectDetailList = new List<string>();
        bool IsAnswerInQuestion;//判断问题是否在
        char[] CurrentOptionType;//选择题的符号类型；是abcd还是ABCDEF还是①②③④⑤
        QuestionType tempQtype;
        QuestionType CurrentQtype;
        int tempBigNum;//用于临时保存大题号，未判断是否正确
        int CurrentBigNum;//当前的大题号
        int tempNum;//用于临时保存小题号，未判断是否正确
        int CurrentQNum;//游标指向的当前的题目编号
        List<Option> tempOps;
        ImportQuestion CurrentQuestion;//游标只想的当前题目
        ImportPaper Paper;
        Word.Paragraphs paras;//包含word文档的所有段落
        NetOffice.WordApi.Paragraphs currentPara;//当前段落
        int CurrentIndex;//当前段落游标位置；
        int ContentStartIndex;//段落的问题、答案等内容开始的位置
        //在导入试题时需要初始化类的参数；
        void InitImporter()
        {
            tempNum = CurrentQNum = 0;
            CurrentIndex = 0;
            CurrentOptionType = null;
            tempOps = null;
            CurrentQuestion = null;
            currentPara = null;
            Paper = new ImportPaper();
            ContentStartIndex = 0;
        }
        static PaperImporter()
        {
            //初始化科目名称列表
            subjectList.Add("语文");
            subjectList.Add("数学");
            subjectList.Add("英语");
            subjectList.Add("政治");
            subjectList.Add("物理");
            subjectList.Add("体育");
            subjectList.Add("生物");
            subjectList.Add("历史");
            subjectList.Add("地理");

            //初始化大题名称（模糊）表
            dictQtypeTitle.Add(QuestionType.SingleChoice, singleChoiceTitle);
            dictQtypeTitle.Add(QuestionType.MultipleChoice, multipleChoiceTitle);
            dictQtypeTitle.Add(QuestionType.Completion, completionTitle);
            dictQtypeTitle.Add(QuestionType.ShortAnswer, shortAnswerTitle);
            dictQtypeTitle.Add(QuestionType.Discussion, discTitle);
        }

        //小题的开始形式为
        //数字+"、"，如  1、下列题目正确的是
        //数字+空格 如   1 下列题目正确的是
        /// <summary>
        /// 判读段落是否已经开始
        /// </summary>
        /// <param name="s"></param>
        /// <param name="num"></param>
        /// <param name="contentStartIndex"></param>
        /// <returns></returns>
        public bool IsQuestion()
        {
            var s = GetCurrentParaText();
            string snum = "";
            var temp = s.Trim();
            Match m = Regex.Match(temp, rexQuestionNum);

            if (m.Success)
            {
                snum = m.Value;
                if (int.Parse(snum) >= 23)
                {


                }
                tempNum = int.Parse(snum);
                if (20 > (tempNum - CurrentQNum) && (tempNum - CurrentQNum) > 0)//新的题号必须必旧题号大，并且不能与上一个题号相差太大，否则该行不是题目
                {
                    CurrentQNum = tempNum;//指向下一题
                    return true;
                }
                else if (CurrentQNum != 1 && tempNum == 1)//新的大题、 重新编号
                {
                    CurrentQNum = tempNum;//指向下一题
                    return true;
                }
            }

            return false;
        }

        Option GetOption(string s)
        {
            Option op = new Option();
            int i = 0;
            var c0 = s[0];
            if ((c0 >= 'A' && c0 <= 'F') | (c0 >= 'a' && c0 <= 'f'))
            {
                op.Op = c0.ToString();
            }
            else
            {
                i = 1;
                op.Op = s[1].ToString();
            }
            op.Content = s.Substring(i + 2);
            return op;



        }


        //从段落中获取选项信息
        bool IsOption()   //选项格式 A)xxxxx   A、xxxxxx  A xxxxxxxxx  A.xxxxxx a.xxxxxxx 等  
        {
            var s = GetCurrentParaText();
            int i = 0;

            var temp = s.Trim();
            var c = temp[0];
            #region sd
            //if (CurrentOptionType == null)
            //{
            //    if (optionType1.Contains(temp[0]) && mark.Contains(temp[1]))
            //    {
            //        CurrentOptionType = optionType1;
            //    }
            //    else if (optionType2.Contains(temp[0]) && mark.Contains(temp[1]))
            //    {
            //        CurrentOptionType = optionType2;
            //    }
            //    else if (optionType3.Contains(temp[0]) && mark.Contains(temp[1]))
            //    {
            //        CurrentOptionType = optionType3;
            //    }
            //    else
            //    {
            //        return false;
            //    }

            //}

            //if (CurrentOptionType.Contains(temp[0]) && mark.Contains(temp[1]))
            //{
            //    bool hasAnotherOp = false;
            //    int preIndex = 0;
            //    string preOp = temp[0].ToString();
            //    var preOptionContent = "";
            //    do
            //    {
            //        char nextOp = Convert.ToChar(preOp[0] + 1);
            //        var j = temp.IndexOf(" " + nextOp);//多个选项之间通常用空格分开
            //        if (j > 0)
            //        {
            //            if (j + 2 < temp.Length && mark.Contains(temp[j + 2]))
            //            {
            //                //在同一行字符串中找到另外一个选项
            //                hasAnotherOp = true;
            //                //将之前的选项添加到ops中
            //                preOptionContent = temp.Substring(preIndex + 2, j - preIndex - 2).TrimEnd();
            //                CurrentQuestion.Options.Add(new Option(preOp, preOptionContent));
            //                preOp = temp[j].ToString();
            //                preIndex = j + 1;
            //            }
            //        }
            //    } while (hasAnotherOp);
            //    preOptionContent = temp.Substring(preIndex + 2).TrimEnd();
            //    CurrentQuestion.Options.Add(new Option(preOp, preOptionContent));
            //    return true;
            //}
            #endregion
            Match m = Regex.Match(temp, rexOption);
            if (m.Success)
            {
                Match singleOp = Regex.Match(temp, rexSingleOption);
                while (singleOp.Success)
                {
                    CurrentQuestion.Options.Add(GetOption(singleOp.Value));
                    singleOp = singleOp.NextMatch();
                }
                return true;
            }
            else
            {
                return false;
            }
        }
        //从第一行读取 科目、年级等数据
        public void GetInfoFromTitle()
        {

        }
        public bool IsBigQuestion()
        {
            var s = GetCurrentParaText();
            var temp = s.Trim();
            Match m = Regex.Match(temp, rexBigNum);
            if (m.Success)
            {
                tempBigNum = Convert.ToInt32(ParseCNNumber.ParseCnToInt(m.Value));
                if (tempBigNum - CurrentBigNum > 0 && tempBigNum - CurrentBigNum < 4)
                {
                    //判断是否包含大题；
                    foreach (var t in dictQtypeTitle.ToList())
                    {
                        foreach (string s1 in t.Value)
                        {
                            if (s.IndexOf(s1) > 0)
                            {
                                CurrentQtype = t.Key;
                                CurrentBigNum = tempBigNum;
                                return true;
                            }
                        }
                    }
                }
            }

            return false;


            //if (isBigNum(temp[0]) && mark.Contains(temp[1]))
            //{
            //    //判断题型

            //}
            //return false;
        }

        public bool IsNewCtype()
        {
            var s = GetCurrentParaText();
            var temp = s.Trim();
            Match m1 = Regex.Match(temp, rexNewContent);
            Match m2 = Regex.Match(temp, rexAnswerInQuestion);
            Match m3 = Regex.Match(temp, rexQuestionRemark);
            return m1.Success || m2.Success || m3.Success;
        }

        public bool MoveNext()
        {
            if (HasNextPara()) { CurrentIndex++; return true; }
            return false;
        }
        public void MoveBack() { CurrentIndex--; }
        public void ReadQuestion()
        {
            CurrentQuestion = new ImportQuestion();//新建题目
            Match m = Regex.Match(GetCurrentParaText().TrimStart(), rexQuestionNum);
            int i = m.Value.Length + GetCurrentParaText().TrimStart().IndexOf(m.Value);
            CurrentQuestion.Question = GetCurrentParaText().TrimStart().Substring(i + 1);

            CurrentQuestion.BigNum = CurrentBigNum;
            CurrentQuestion.QuestionNum = CurrentQNum;
            CurrentQuestion.QType = CurrentQtype;


            bool end = false;
            do
            {
                //var temp = GetNextParaText();
                if (MoveNext())
                {
                    var temp = GetCurrentParaText();
                    if (!IsNewCtype())
                    {
                        CurrentQuestion.Question += temp;

                    }
                    else
                    {
                        if (!IsOption() && !IsQuestionAnswer() && !IsQuestionRemark())
                        {
                            end = true;
                            MoveBack();
                        }
                    }
                }
                //if (!IsBigQuestion() && !IsQuestion() && !IsOption())
                //{
                //    CurrentQuestion.Question += temp;

                //}
                //else if (tempOps.Count > 0)
                //{
                //    foreach (var o in tempOps)
                //    {
                //        CurrentQuestion.Options.Add(o);
                //    }
                //}
                else
                {
                    end = true;

                }
            } while (!end);
            //CurrentIndex = CurrentIndex - 1;
            Paper.Questions.Add(CurrentQuestion);
        }
        public string GetCurrentParaText()
        {
            var s = paras[CurrentIndex].Range.Text;
#if DEBUG
            if (s.IndexOf("图") >= 0)
            {


            }

            if (s.IndexOf("\\u00") >= 0)
            {


            }
#endif
            return s;
        }
        //判断是否为问题的附属答案%（答案位于每题问题的下方）
        public bool IsQuestionAnswer()
        {
            var s = GetCurrentParaText();
            var temp = s.TrimStart();
            //foreach (var t in answer)
            //{
            //    var i = temp.Replace(" ", "").IndexOf(t);
            //    if (3 > i && i > 0)　　//在开始出有  "答案"、“参考答案”、“正确答案”等标记必须在行的开始时出现
            //    {
            //        var content = s.Substring(s.IndexOf(t) + t.Length);//"答案后面的内容"
            //        int mark = (from e in answerEnd             //判断答案后的是： 】 ] 还是空格
            //                    select content.IndexOf(e)).Where(m => m > 0).Min(m => m); //获得该符号的位置
            //        ContentStartIndex = mark + 1;//符号后面为答案；
            //        return true;
            //    }
            //}
#if DEBUG
            if (temp.IndexOf("答案") >= 0)
            {


            }
#endif
            Match m = Regex.Match(temp, rexAnswer);
            if (!m.Success) return false;
            CurrentQuestion.Answer += m.Value;
            while (true)
            {
                //MoveNext();
                //s = GetCurrentParaText();
                if (!MoveNext())
                {
                    break;
                }
                else
                {
                    if (!IsNewCtype())
                        CurrentQuestion.Answer += GetCurrentParaText();
                    else
                    {
                        MoveBack();
                        break;
                    }
                }
            }
            return true;
        }
        public bool IsQuestionRemark()
        {
            var s = GetCurrentParaText();
            var temp = s.TrimStart();

            Match m = Regex.Match(temp, rexQuestionRemark);
            if (!m.Success) return false;
            CurrentQuestion.Info += m.Value;
            while (true)
            {
                //;
                //s = GetCurrentParaText();
                if (!MoveNext())
                {

                    break;
                }
                else
                {
                    if (!IsNewCtype())
                        CurrentQuestion.Info += GetCurrentParaText();
                    else
                    {
                        MoveBack();
                        break;
                    }
                }
            }
            return true;
        }

        public bool HasNextPara()
        {
            if (CurrentIndex + 1 < paras.Count) return true;
            return false;
        }
        public string GetNextParaText()
        {
            if (HasNextPara()) { return paras[++CurrentIndex].Range.Text; }
            return null;
        }
        public void ReadTitle()
        {
            string title = "";
            CurrentIndex = 0;
            while (MoveNext() && !IsNewCtype())
            {
                title += GetCurrentParaText() + "\r\n";
            }
            Paper.ExamTitle = title;
        }
        public ImportPaper GetPaperFormFile(string file)
        {

            Word.Application wordApplication = new Word.Application();
            wordApplication.DisplayAlerts = WdAlertLevel.wdAlertsNone;
            // create a utils instance, not need for but helpful to keep the lines of code low
            Word.Tools.CommonUtils utils = new Word.Tools.CommonUtils(wordApplication);
            var doc = wordApplication.Documents.Open(file);
            InitImporter();
            paras = doc.Paragraphs;
            ReadTitle();
            string temp;
            do
            {
                if (IsBigQuestion()) { }
                else if (IsQuestion())
                {
                    ReadQuestion();
                }
            } while (MoveNext());
            wordApplication.Quit();
            wordApplication.Dispose();
            return Paper;
        }

    }
}