using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using OnlineExam.Models;
namespace OnlineExam
{
    public class Utitlity
    {
        //对问题进行编码
        public static string EncodeQuestionID(long id, QuestionType qtype)
        {
            string code = "000000000000000000000" + id.ToString();
            code = code.Substring(code.Length - 12);
            string pre = Convert.ToChar((Convert.ToInt32('A') + Convert.ToInt32(qtype) - 1)).ToString();
            code = pre + code;
            return code;
        }
        //判断CkEditor控件的内容是否为空
        public static bool IsEditorEmpty(string txt)
        {
            if (txt == null || txt.Trim() == "" || txt.Trim() == "<p></p>") return true;
            return false;

        }
        public static QuestionChoice ModelStandardize(QuestionChoice q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";
            if (IsEditorEmpty(q.OptionA)) q.OptionA = null;
            if (IsEditorEmpty(q.OptionB)) q.OptionB = null;

            //List<OptionItem> list = new List<OptionItem>();
            //if (!IsEditorEmpty(q.OptionD)) list.Add(new OptionItem(q.OptionD, q.DisTrue));
            //if (!IsEditorEmpty(q.OptionE)) list.Add(new OptionItem(q.OptionE, q.DisTrue));
            //if (!IsEditorEmpty(q.OptionF)) list.Add(new OptionItem(q.OptionF, q.DisTrue));

            #region 用于重组可选选项
            if (IsEditorEmpty(q.OptionD))
            {

                if (IsEditorEmpty(q.OptionE))
                {

                    if (IsEditorEmpty(q.OptionF))
                    {
                        //三个可选答案皆为空，不需重组
                    }
                    else
                    {
                        q.OptionD = q.OptionF;
                        q.DisTrue = q.FisTrue;
                        q.OptionF = "";
                        q.FisTrue = false;
                    }

                }
                else
                {
                    q.OptionD = q.OptionE;
                    q.DisTrue = q.EisTrue;
                    q.OptionE = "";
                    q.EisTrue = false;
                }
            }

            if (IsEditorEmpty(q.OptionE))
            {

                if (!IsEditorEmpty(q.OptionF))
                {
                    q.OptionE = q.OptionF;
                    q.EisTrue = q.EisTrue;
                    q.OptionF = "";
                    q.FisTrue = false;
                }
            }
            #endregion
            if (IsEditorEmpty(q.OptionC)) q.OptionC = "";
            if (IsEditorEmpty(q.OptionD)) q.OptionD = "";
            if (IsEditorEmpty(q.OptionE)) q.OptionE = "";
            if (IsEditorEmpty(q.OptionF)) q.OptionF = "";
            return q;
        }
        public static QuestionEssay ModelStandardize(QuestionEssay q)
        {
            //if (IsEditorEmpty(q.Question)) q.Question = "";
            if (IsEditorEmpty(q.Description)) q.Description = "";
            return q;
        }
        public static QuestionType ToQuestionType(string qt)
        {
            QuestionType t;
            switch (qt)
            {
                case "Discussion":
                    t = QuestionType.Discussion;
                    break;

                case "Completion":
                    t = QuestionType.Completion;
                    break;
                case "SingleChoice":
                    t = QuestionType.SingleChoice;
                    break;
                case "MultipleChoice":
                    t = QuestionType.MultipleChoice;
                    break;
                default:
                    t = QuestionType.ShortAnswer;
                    break;


            }
            return t;

        }
    }
    public class OptionItem
    {
        public string Answer;
        public bool IsRight;
        public OptionItem(string answer, bool isRight)
        {
            Answer = answer;
            IsRight = isRight;
        }

    }
    public class CKey
    {
        public static readonly string DefaultSearchKeyWord = "查询关键字";
        public static readonly int DefaultPageCount = 10;

        public static readonly int DataListPageCount = 10;
        public static readonly int GridViewPageCount = 20;

        //grid表格中的题目字段的最大长度
        public static readonly int QuestionTitleSummaryLenght = 5;
        //grid表格中的题目的描述字段的最大长度
        public static readonly int QuestionDescriptionSummaryLenght = 4;


    }
    public class SessionString
    {
        public static readonly string ImportPaper = "ImportPaper";


    }
    public class Auditing
    {
        public static readonly int Pass = 1;//审核通过
        public static readonly int Fail = -1;//审核不通过i        
        public static readonly int Unreviewed = 0;//暂未审核

    }
    public enum EditType
    {
        Edit = 0,
        Create
    }
    public class CUrl
    {
        public static readonly string QuestionResourceDir = System.Web.HttpContext.Current.Server.MapPath("~/QuestionBankResource/");
        public static readonly string QuestionResource = "/QuestionBankResource/";
        public static readonly string ImportPaper = "/QuestionBankResource/ImportPaper/";
        public static readonly string ImportPaperImage = ImportPaper + "Image/";
    }
    public enum QuestionType
    {
        UnKnown = 0,
        SingleChoice = 1,
        MultipleChoice,
        Completion,
        ShortAnswer,
        Discussion

    }
    public static class QuestionTypeExtensions
    {
        public static string GetInfo(this QuestionType me)
        {
            switch (me)
            {
                case QuestionType.UnKnown:
                    return "未知(默认设置成简答题)";
                case QuestionType.SingleChoice:
                    return "单选题";
                case QuestionType.MultipleChoice:
                    return "多选题";
                case QuestionType.ShortAnswer:
                    return "简答题/计算题";
                case QuestionType.Completion:
                    return "填空题";
                case QuestionType.Discussion:
                    return "议论题/应用题";
                default:
                    return "";
            }
        }
    
    }
    public enum DataView
    {
        GridView = 1,
        DataList = 2
    }
    public class JsonReturn
    {
        public int Success;
        public string Message;
        public string Result;
    }
}
